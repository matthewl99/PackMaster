from flask import Flask, jsonify, request
import random
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cards.db'
db = SQLAlchemy(app)

# Define a Card model
class Card(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    rarity = db.Column(db.String(50), nullable=False)
    image_url = db.Column(db.String(255))

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    collections = db.relationship('UserCollection', backref='user', lazy=True)

class UserCollection(db.Model):
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)
    card_id = db.Column(db.Integer, db.ForeignKey('card.id'), primary_key=True)
    quantity = db.Column(db.Integer, default=1)

    def add_cards_to_inventory(user_id, cards):
        for card in cards:
            user_card = UserCollection.query.filter_by(user_id=user_id, card_id=card.id).first()
            if user_card:
                user_card.quantity += 1
            else:
                new_user_card = UserCollection(user_id=user_id, card_id=card.id, quantity=1)
                db.session.add(new_user_card)
        db.session.commit()

class TradeOffer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    receiver_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    offered_cards = db.Column(db.String)  # Could be JSON or a relationship to another table
    requested_cards = db.Column(db.String)  # Same as above
    status = db.Column(db.String(50)) 

# Initialize the database
@app.before_first_request
def create_tables():
    db.create_all()

# Simulate opening a pack with dynamic rarity distribution
def open_pack(pack_type):
    # Define rarity distributions for each pack type
    rarity_distributions = {
        'standard': {'common': 70, 'uncommon': 20, 'rare': 9, 'ultra_rare': 1},
        'event': {'common': 50, 'uncommon': 30, 'rare': 15, 'ultra_rare': 5},
    }

    # Define guaranteed rare logic
    guaranteed_rare = {
        'standard': False,
        'event': True,
    }

    # Select the distribution for the current pack type
    distribution = rarity_distributions.get(pack_type, rarity_distributions['standard'])
    guaranteed = guaranteed_rare.get(pack_type, False)

    # Determine the number of cards in the pack
    num_cards = 5  # Example number of cards

    cards = []
    for _ in range(num_cards):
        rarity = select_rarity(distribution)
        card = select_card_by_rarity(rarity)
        cards.append(card)

    # Ensure at least one rare card if guaranteed
    if guaranteed and not any(card.rarity in ['rare', 'ultra_rare'] for card in cards):
        cards[-1] = select_card_by_rarity('rare')

    return cards

def select_rarity(distribution):
    # Randomly select a rarity based on the distribution
    rarities = list(distribution.keys())
    probabilities = [distribution[rarity] for rarity in rarities]
    return random.choices(rarities, weights=probabilities, k=1)[0]

def select_card_by_rarity(rarity):
    # Query the database for a card of the specified rarity
    card = Card.query.filter_by(rarity=rarity).order_by(db.func.random()).first()
    return card

@app.route('/open_pack')
def api_open_pack():
    cards = open_pack()
    return jsonify([{'name': card.name, 'rarity': card.rarity, 'image_url': card.image_url} for card in cards])

if __name__ == '__main__':
    app.run(debug=True)

@app.route('/inventory/<int:user_id>')
def get_user_inventory(user_id):
    user_inventory = UserCollection.query.filter_by(user_id=user_id).all()
    inventory_details = []
    for item in user_inventory:
        card = Card.query.get(item.card_id)
        inventory_details.append({'card_name': card.name, 'quantity': item.quantity})
    return jsonify(inventory_details)